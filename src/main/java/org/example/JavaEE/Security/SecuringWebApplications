

                                    GETTING STARTED SECURING WEB APPLICATIONS


OVERVIEW OF WEB APPLICATION SECURITY

    - In the Java EE platform, web components provide the dynamic extension capabilities for a web server.

    - Web components can be Java servlets or JavaServer Faces pages.

    - Annotations and/or deployment descriptors are used to relay information to the deployer about security and other aspects of the application.

    - Specifying this information in annotations or in the deployment descriptor helps the deployer set up the appropriate security policy for the web application.

    - Any values explicitly specified in the deployment descriptor override any values specified in annotations.

    - Security for Java EE web applications can be implemented in the following ways.

        * Declarative security can be implemented using either metadata annotations or an application's deployment descriptor.

        * Programmatic security is embedded in an application and can be used to make security decisions when
                declarative security alone is not sufficient to express the security model of an application.

        * Message security works with web services and incorporates security features, such as digital signatures and encryption,
                into the header of a SOAP message, working in the application layer, ensuring end-to-end security.


------------------------------------------------------------------------------------------------------------------------

SECURING WEB APPLICATIONS

    - Specifying Security Constraints

        * A security constraint is used to define the access privileges to a collection of resources using their URL mapping.

        * If your web application uses a servlet, you can express the security constraint information by using annotations (@HttpConstraint).

        * If your web application does not use a servlet, however, you must specify a security-constraint element in the deployment descriptor file.

        * The following subelements can be part of a security-constraint.

            > Web resource collection:

                + A list of URL patterns (the part you want to constrain) and HTTP operations (the methods) that describe a set of resources to be protected.

                + A web resource collection consists of the following subelements.

                    -> web-resource-name is the name you use for this resource. Its use is optional.

                    -> url-pattern is used to list the request URI to be protected. Many applications have both unprotected and protected resources.

                    -> http-method or http-method-omission is used to specify which methods should be protected or which methods should be omitted from protection.
                            An HTTP method is protected by a web-resource-collection under any of the following circumstances:

                        --> If no HTTP methods are named in the collection (which means that all are protected)

                        --> If the collection specifically names the HTTP method in an http-method subelement

                        --> If the collection contains one or more http-method-omission elements, none of which names the HTTP method


            > Authorization constraint: Specifies whether authentication is to be used and names the roles authorized to perform the constrained requests.

                + An authorization constraint (auth-constraint) contains the role-name element. You can use as many role-name elements as needed here.

                + An auth-constraint establishes a requirement for authentication and
                        names the roles authorized to access the URL patterns and HTTP methods declared by this security constraint.

                + If there is no authorization constraint, the container must accept the request without requiring user authentication.

                + If there is an authorization constraint but no roles are specified within it,
                        the container will not allow access to constrained requests under any circumstances.

                + Role names are case sensitive.

                + Roles defined for the application must be mapped to users and groups defined on the server,
                        except when default principal-to-role mapping is used.

                + For a servlet, the @HttpConstraint and @HttpMethodConstraint annotations accept a rolesAllowed element that specifies the authorized roles.


            > User data constraint: Specifies how data is protected when transported between a client and a server.
                    User data constraints are discussed in Specifying a Secure Connection.

                + Contains the transport-guarantee subelement.

                + A user data constraint can be used to require that a protected transport-layer connection, such as HTTPS,
                        be used for all constrained URL patterns and HTTP methods specified in the security constraint.

                + The choices for transport guarantee are CONFIDENTIAL,
                                                          INTEGRAL, or
                                                          NONE.

                + Generally means that the use of SSL is required and applies to all requests that match the URL patterns in the web resource collection,
                        not just to the login dialog box.

                + The strength of the required protection is defined by the value of the transport guarantee, as follows.

                    -> Specify CONFIDENTIAL when the application requires that data be transmitted so as to prevent other entities from observing the contents.

                    -> Specify INTEGRAL when the application requires that the data be sent between client and server in such a way that it cannot be changed.

                    -> Specify NONE to indicate that the container must accept the constrained requests on any connection, including an unprotected one.

                + The user data constraint is handy to use in conjunction with basic and form-based user authentication.


    - Specifying Authentication Mechanisms

        * A user authentication mechanism specifies

            > The way a user gains access to web content

            > With basic authentication, the realm in which the user will be authenticated

            > With form-based authentication, additional attributes


        * The Java EE platform supports the following authentication mechanisms:

            > Basic authentication                    > Digest authentication            > Mutual authentication

            > Form-based authentication               > Client authentication


        * HTTPS Basic Authentication

            > Specifying HTTP basic authentication requires that the server request a user name and password from
                    the web client and verify that the user name and password are valid by comparing them against
                    a database of authorized users in the specified or default realm.

            > Basic authentication is the default when you do not specify an authentication mechanism.

            > When basic authentication is used, the following actions occur:

                + A client requests access to a protected resource.

                + The web server returns a dialog box that requests the user name and password.

                + The client submits the user name and password to the server.

                + The server authenticates the user in the specified realm and, if successful, returns the requested resource.


        * Form-Based Authentication

            > Form-based authentication allows the developer to control the look and feel of the login authentication screens by
                    customizing the login screen and error pages that an HTTP browser presents to the end user.

            > When form-based authentication is declared, the following actions occur.

                + A client requests access to a protected resource.

                + If the client is unauthenticated, the server redirects the client to a login page.

                + The client submits the login form to the server.

                + The server attempts to authenticate the user.

                    -> If authentication succeeds, the authenticated user's principal is checked to ensure that it is in a role that is
                            authorized to access the resource.
                            If the user is authorized, the server redirects the client to the resource by using the stored URL path.

                    -> If authentication fails, the client is forwarded or redirected to an error page.


            > When you create a form-based login, be sure to maintain sessions using cookies or SSL session information.

            > For authentication to proceed appropriately, the action of the login form must always be j_security_check.
                    This restriction is made so that the login form will work no matter which resource it is for and
                    to avoid requiring the server to specify the action field of the outbound form.


        * Digest Authentications

            > Like basic authentication, digest authentication authenticates a user based on a user name and a password.

            > However, unlike basic authentication, digest authentication does not send user passwords over the network.

            > Instead, the client sends a one-way cryptographic hash of the password and additional data.


    - Specifying an Authentication Mechanism in the Deployment Descriptor

        * To specify an authentication mechanism, use the login-config element. It can contain the following subelements.

            > The auth-method subelement configures the authentication mechanism for the web application. The element content must be either NONE,
                                                                                                                                             BASIC,
                                                                                                                                            DIGEST,
                                                                                                                                            FORM, or
                                                                                                                                            CLIENT-CERT.

            > The realm-name subelement indicates the realm name to use when the basic authentication scheme is chosen for the web application.

            > The form-login-config subelement specifies the login and error pages that should be used when form-based login is specified.


        * When you try to access a web resource that is constrained by a security-constraint element,
                the web container activates the authentication mechanism that has been configured for that resource.

        * The authentication mechanism specifies how the user will be prompted to log in.

        * The following example shows how to declare form-based authentication in your deployment descriptor:

                                      <login-config>
                                          <auth-method>FORM</auth-method>
                                          <realm-name>file</realm-name>
                                          <form-login-config>
                                              <form-login-page>/login.xhtml</form-login-page>
                                              <form-error-page>/error.xhtml</form-error-page>
                                          </form-login-config>
                                      </login-config>

    - Declaring Security Roles

        * You can declare security role names used in web applications by using the security-role element of the deployment descriptor.

        * Use this element to list all the security roles that you have referenced in your application.

        *                         <security-constraint>
                                      <web-resource-collection>
                                          <web-resource-name>Protected Area</web-resource-name>
                                          <url-pattern>/security/protected/*</url-pattern>
                                          <http-method>PUT</http-method>
                                          <http-method>DELETE</http-method>
                                          <http-method>GET</http-method>
                                          <http-method>POST</http-method>
                                      </web-resource-collection>
                                      <auth-constraint>
                                          <role-name>manager</role-name>
                                      </auth-constraint>
                                  </security-constraint>

                                   <!-- Security roles used by this web application -->
                                  <security-role>
                                      <role-name>manager</role-name>
                                  </security-role>
                                  <security-role>
                                      <role-name>employee</role-name>
                                  </security-role>

                In this example, the security-role element lists all the security roles used in the application: manager and employee.


------------------------------------------------------------------------------------------------------------------------

USING PROGRAMMATIC SECURITY WITH WEB APPLICATIONS

    - Programmatic security is used by security-aware applications when declarative security alone is not enough to express the security model of the application.

    - Authenticating Users Programmatically

        * The following methods of the HttpServletRequest interface enable you to authenticate users for a web application programmatically.

            > authenticate allows an application to instigate authentication of the request caller by the container from within an unconstrained request context.
                    A login dialog box displays and collects the user name and password for authentication purposes.

            > login allows an application to collect user name and password information as an alternative to specifying
                    form-based authentication in an application deployment descriptor.

            > logout allows an application to reset the caller identity of a request.


        * Checking Caller Identity Programmatically

            > Security management should be enforced by the container in a manner that is transparent to the web component.

            > Following methods enable you to access security information about the component's caller:

                + getRemoteUser determines the user name with which the client authenticated.

                    -> Returns the name of the remote user (the caller) associated by the container with the request. If there is no user, returns null.

                + isUserInRole determines whether a remote user is in a specific security role.

                    -> If no user has been authenticated, this method returns false.

                    -> This method expects a String user role-name parameter.

                    -> security-role-ref should be declared in the deployment descriptor with a role-name subelement containing the role name to be passed.

                + getUserPrincipal determines the principal name of the current user and returns a java.security.Principal object.

                    -> If no user has been authenticated, this method returns null.

                    -> Calling the getName method on the Principal returned by getUserPrincipal returns the name of the remote user.


    - Declaring and Linking Role References

        * A security role reference is a mapping between the name of a role that is called from a web component using
                isUserInRole(String role) and the name of a security role that has been defined for the application.

        * If no security-role-ref element is declared in a deployment descriptor and the isUserInRole method is called,
                the container defaults to checking the provided role name against the list of all security roles defined for the web application.

        * The security-role-ref element is used when an application uses the HttpServletRequest.isUserInRole(String role).

        * The value passed to the isUserInRole method is a String representing the role name of the user.

        * The value of the role-name element must be the String used as the parameter to the HttpServletRequest.isUserInRole(String role).

        * The role-link must contain the name of one of the security roles defined in the security-role elements.

        * The container uses the mapping of security-role-ref to security-role when determining the return value of the call.

        *                                 <servlet>
                                          ...
                                              <security-role-ref>
                                                  <role-name>cust</role-name>
                                                  <role-link>bankCustomer</role-link>
                                              </security-role-ref>
                                          ...
                                          </servlet>

                  In this example, if the servlet method is called by a user in the bankCustomer security role, isUserInRole("cust") returns true.


        * The role-link in security-role-ref must match a role-name defined in the security-role element of the same web.xml deployment descriptor, as shown here:

                                              <security-role>
                                                  <role-name>bankCustomer</role-name>
                                              </security-role>


