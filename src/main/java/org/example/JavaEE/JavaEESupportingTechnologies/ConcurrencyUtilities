

                                        CONCURRENCY UTILITIES FOR JAVA EE

CONCURRENCY BASICS

    - Concurrency is the concept of executing two or more tasks at the same time (in parallel).

    - Tasks may include methods (functions), parts of a program, or even other programs.

    - With current computer architectures, support for multiple cores and multiple processors in a single CPU is very common.

    - Threads and Processes

        * The two main concurrency concepts are processes and threads.

        * Processes are primarily associated with applications running on the operating system (OS).

            > A process has specific runtime resources to interact with the underlying OS and allocate other resources, such as its own memory,
                    just as the JVM process does.

        * Threads share some features with processes, since both consume resources from the OS or the execution environment.
                But threads are easier to create and consume many fewer resources than a process.

        * Although concurrent programming solves many problems and can improve performance for most applications,
                there are a number of situations where multiple execution lines (threads or processes) can cause major problems.
                These situations include the following:

            > Deadlocks

            > Thread starvation

            > Concurrent accessing of shared resources

            > Situations when the program generates incorrect data


------------------------------------------------------------------------------------------------------------------------

MAIN COMPONENTS OF THE CONCURRENCY UTILITIES

    - The primary components of the concurrency utilities are as follows.

        * ManagedExecutorService: A managed executor service is used by applications to execute submitted tasks asynchronously.
                                  Tasks are executed on threads that are started and managed by the container.

        * ManagedScheduledExecutorService: Managed scheduled executor service is used by applications to execute submitted tasks asynchronously at specific times.
                                           Tasks are executed on threads that are started and managed by the container.

        * ContextService: A context service is used to create dynamic proxy objects that capture the context of a container and enable applications to run
                          within that context at a later time or be submitted to a Managed Executor Service.
                          The context of the container is propagated to the thread executing the task.

        * ManagedThreadFactory: A managed thread factory is used by applications to create managed threads.
                                The threads are started and managed by the container. The context of the container is propagated to the thread executing the task.


------------------------------------------------------------------------------------------------------------------------

CONCURRENCY AND TRANSACTIONS

    - The most basic operations for transactions are commit and rollback, but, in a distributed environment with concurrent processing,
            it can be difficult to guarantee that commit or rollback operations will be successfully processed,
            and the transaction can be spread among different threads, CPU cores, physical machines, and networks.

    - Ensuring that a rollback operation will successfully execute in such a scenario is crucial.

    - Concurrency Utilities relies on the JTA to implement and support transactions on its components through javax.transaction.UserTransaction,
            allowing application developers to explicitly manage transaction boundaries.

    - Optionally, context objects can begin, commit, or roll back transactions, but these objects cannot enlist in parent component transactions.


------------------------------------------------------------------------------------------------------------------------

CONCURRENCY AND SECURITY

    - Concurrency Utilities for Java EE defers most security decisions to the application server implementation.
            If, however, the container supports a security context, that context can be propagated to the thread of execution.

    - The ContextService can support several runtime behaviors, and the security attribute, if enabled, will propagate the container security principal.



