

                         BUILDING WEB SERVICES WITH JAX-WS       (Java API for XML Web Services)

- JAX-WS is a technology for building web services and clients that communicate using XML.

- JAX-WS allows developers to write message-oriented as well as Remote Procedure Callâ€“oriented (RPC-oriented) web services.

- In JAX-WS, a web service operation invocation is represented by an XML-based protocol, such as SOAP.

    * The SOAP specification defines the envelope structure, encoding rules, and conventions for representing web service invocations and responses.
            These calls and responses are transmitted as SOAP messages (XML files) over HTTP.

- On the server side, the developer specifies the web service operations by defining methods in an interface written in the Java programming language.

- The developer also codes one or more classes that implement those methods. Client programs are also easy to code.

- A client creates a proxy (a local object representing the service) and then simply invokes methods on the proxy.

- With JAX-WS, the developer does not generate or parse SOAP messages.
        It is the JAX-WS runtime system that converts the API calls and responses to and from SOAP messages.

- Advantages of JAX-WS:

    * Platform independence of JAva

    * Not restrictive, meaning that JAX-WS can access a web service that is not running on thr Java platform.


------------------------------------------------------------------------------------------------------------------------

CREATING A SIMPLE WEB SERVICE AND CLIENTS WITH JAX-WS

    - The starting point for developing a JAX-WS web service is a Java class with the @WebService annotation.
            This annotation defines the class as a web service endpoint.

    - A Service Endpoint Interface or Service Endpoint Implementation (SEI) is a Java interface or class, respectively, that declares the methods that a client can
            invoke on the service.
            An interface is not required when building a JAX-WS endpoint.
            The web service implementation class implicitly defines an SEI.

    - You may specify an explicit interface by adding the endpointInterface element to the @WebService annotation in the implementation class.
            You must then provide an interface that defines the public methods made available in the endpoint implementation class.

    - The basic steps for creating a web service and client are as follows:

        1. Code the implementation class

        2. Compile the implementation class

        3. Package the files into a WAR files

        4. Deploy the WAR file.
                The web service artifacts, which are used to communicate with clients, are generated by GlassFish Server during deployment.

        5. Code the client class.

        6. Use the wsimport Maven goal to generate and compile the web service artifacts needed to connect to the service

        7. Compile the client class

        8. Run the client.

    - Requirements of a JAX-WS Endpoint

        * The implementing class must be annotated with either @WebService or @WebServiceProvider.

        * The implementing class may explicitly reference an SEI through the endpointInterface element of the @WebService annotation but is not required to do so.
                If no endpointInterface is specified in @WebService, an SEI implicitly defined for the implementing class.

        * The business methods of the implementing class must be public and must not be declared static or final.

        * Business methods that are exposed to web service client must be annotate with @WebMethod

        * Business methods that are exposed to web service client must have JAXB-compatible parameters and return types.

        * The implementing class must not be declared final or be abstract.

        * The implementing class must have a default public constructor.

        * The implementing class must not define the finalize method.

        * The implementing class may use the @PostConstruct or @PreDestroy annotations on its method for lifecycle event callbacks.

                > @PostConstruct method is called by the container before the implementing class begins responding to web service clients.

                > @PreDestroy method is called by the container before the endpoint is removed from operation.


------------------------------------------------------------------------------------------------------------------------

TYPES SUPPORTED BY JAX-WS

    - JAX-WS delegates the mapping of Java programming language types to and from XML definitions to JAXB.

    - Not every class in the Java language can be used as a method parameter or return type in JAX-WS.

    - XML Data Types    to      Java Data Types:                          |     XML Data Types    to    Java Data Types:
                                                                          |
        xsd:string              java.lang.String                          |     xsd:base64Binary        byte[]
                                                                          |
        xsd:integer             java.math.BigInteger                      |     xsd:hexBinary           byte[]
                                                                          |
        xsd:int                 int                                       |     xsd:unsignedInt         long
                                                                          |
        xsd.long                long                                      |     xsd:unsignedShort       int
                                                                          |
        xsd:short               short                                     |     xsd:unsignedByte        short
                                                                          |
        xsd:decimal             java.math.BigDecimal                      |     xsd:time                javax.xml.datatype.XMLGregorianCalendar
                                                                          |
        xsd:float               float                                     |     xsd:date                javax.xml.datatype.XMLGregorianCalendar
                                                                          |
        xsd:double              double                                    |     xsd:g                   javax.xml.datatype.XMLGregorianCalendar
                                                                          |
        xsd:boolean             boolean                                   |     xsd:anySimpleType       java.lang.Object
                                                                          |
        xsd:byte                byte                                      |     xsd:anySimpleType       java.lang.String
                                                                          |
        xsd:QName               javax.xml.namespace.QName                 |     xsd:duration            javax.xml.datatype.Duration
                                                                          |
        xsd:dateTime            javax.xml.datatype.XMLGregorianCalendar   |     xsd:NOTATION            javax.xml.namespace.QName



    - Java Classes                to        XML Data Types   |    Java Classes              to                XML Data Types
                                                             |
        java.lang.String                    xs:string        |    javax.xml.datatype.XMLGregorianCalendar     xs:anySimpleType
                                                             |
        java.math.BigInteger                xs:integer       |    javax.xml.datatype.Duration                 xs:duration
                                                             |
        java.math.BigDecimal                xs:decimal       |    java.lang.Object                            xs:anyType
                                                             |
        java.util.Calendar                  xs:dateTime      |    java.awt.Image                              xs:base64Binary
                                                             |
        java.util.Date                      xs:dateTime      |    javax.activation.DataHandler                xs:base64Binary
                                                             |
        javax.xml.namespace.QName           xs:QName         |    javax.xml.transform.Source                  xs:base64Binary
                                                             |
        java.net.URI                        xs:string        |    java.util.UUID                              xs:string




