

                                    BUILDING RESTFUL WEB SERVICES WITH JAX-RS


WHAT ARE RESTFUL WEB SERVICES?

    - RESTful web services are loosely coupled, lightweight web services that are particularly well suited for creating APIs for clients across the internet.

    - Representational State Transfer (REST) is an architectural style of client-server application centered around the
            transfer of representations of resources through requests and responses.
            Data and functionality are considered resources and are accessed using Uniform Resource Identifiers (URIs), typically links on the Web.
                    The resources are represented by documents and are acted upon by using a set of simple, well-defined operations.

    - For example;

        * A REST resource might be the current weather conditions for a city.

        * The representation of that resource might be an XML document, an image file, or an HTML page.

        * A client might retrieve a particular representation, modify the resource by updating its data, or delete the resource entirely.


    - The REST architectural style is deigned to use a stateless communication protocol, typically HTTP.

    - In the RET architectural style, clients and servers exchange representations of resources by using a standardized interface and protocol.

    - The following principles encourage RESTful applications to be simple, lightweight, and fast.

        * Resource Identification through URI:  A RESTful web service exposes a set of resources that identify the targets of the interaction with its clients.
                                                Resources are identified by URIs, which provide a global addressing space for resource and service discovery.

        * Uniform interface:    Resources are manipulated using a fixed set of four create, read, update, delete operations: PUT, GET, POST, DELETE.

            > PUT creates a new resource
            > GET retrieves the current state of a resource in some representation
            > POST transfers a new state onto a resource
            > DELETE deletes a resource

        * Self-descriptive messages:    Resources are decoupled from their representation so that their content can be accessed in a variety of formats,
                                        such as HTML, XML, plain text, PDF, JPEG, JSON, and other document formats.
                                        Metadata about the resource is available and used.

        * Stateful interactions through links:  Every interaction with a resource is stateless; that is, request messages are self-contained.
                                                Stateful interactions are based on the concept of explicit state transfer.
                                                Several techniques exist to exchange state, such as URI rewriting,
                                                                                                    cookies, and
                                                                                                    hidden form fields.
                                                State can be embedded in response messages to point to valid future states of the interaction.


------------------------------------------------------------------------------------------------------------------------

CREATING A RESTFUL ROOT RESOURCE CLASS

    - Root resource classes are "plain old Java objects" (POJOs) that are either:
            * annotated with @Path or have at least one method annotated with @Path or
            * a request method designator, such as @GET, @PUT, @POST, OR @DELETE.

    - Resource methods are methods of a resource class annotated with a request method designator.

    - Developing RESTful Web Services with JAX-RS

        * JAX-RS is a Java API designed to make it easy to develop applications that use the rEST architecture.

        * The JAX-RS API uses Java annotations to simplify the development of RESTful web services.

        * Developers decorate Java class files with JAX-RS annotations to define resources and the actions that can be performed on those resources.

        * JAX-RS annotations are runtime annotations; therefore, runtime reflection will generate the helper classes and artifacts for the resource.

        * A Java EE application archive containing JAX-RS resource classes will have the resources configured,
                                                                                     the helper classes and artifacts generated, and
                                                                                     the resource exposed to clients by deploying the archive to a Java EE server.

        * JAX-RS Annotations:

            > @Path             > @PathParam            > @PUT              > @Produces
            > @GET              > @QueryParam           > @DELETE           > @Provider
            > @POST             > @Consumes             > @HEAD             > @ApplicationPath


        * The @Path annotation's value is a relative URI path. Variables can be embedded in the URIs (URI path template).

        * The @Produces annotation is used to specify the MIME media types a resource can produce and send back to the client.

        * The @Consumes annotation is used to specify the MIME media types a resource can consume that were sent by the client.


    - The @Path Annotation and URI Path Templates

        * The @Path annotation identifies the URI path template to which the resource responds and is specifies at the class or method level of a resource.

        * The @Path annotation's value is a partial URI path template relative to the base URI of the server on which the resource is deployed,
                                                                                  the context root of the applications, and
                                                                                  the URL pattern to which the JAX-RS runtime responds.

        * URI path templates are URIs with variables embedded within the URI syntax.

            > These variables are substituted at runtime in order for a resource to respond to a request based on the substituted URI.

            > Variables are denoted by braces ({ and }).

            > For example;              @Path("/users/{username}")
                                        public class UserResource {

                                            @GET
                                            @Produces("text/xml")
                                            public String getUser(@PathParam("username") String userName) { ... }
                                        }

        * A @Path value isn't required to have leading or trailing slashes (/). The JAX-RS parses the template the same way regardless of the slash.

        * A URI path template has one or more variables, with each variable name surrounded by braces.

        * A variable name can be used more than once in the URI path template.

        * If a character in the value of a variable would conflict ith the reserved characters of a URI, the character should be substituted with percent encoding.


    - Responding to HTTP Methods and Requests

        * The behavior of a resource is determined by the HTTP methods to which the resource is responding.

        * The Request Method Designator Annotations

            > JAX-RS defines a set of request method designators for the common HTTP methods GET, POST, PUT, DELETE, and HEAD.

            > By default, the JAX-RS runtime will automatically support the methods HEAD and OPTIONS if not explicitly implemented.

                + For HEAD, the runtime will invoke the implemented GET method, if present, and ignore the response entity, if set.
                + For OPTIONS, the Allow response header will be set to the set of HTTP methods supported by the resource.

            > Methods decorated with request method designators must return void,
                                                                            a Java type, or
                                                                            a javax.ws.rs.core.Response object.

            > Multiple parameters may be extracted from the URI by using the @PathParam or @QueryParam annotations.

            > Methods that need to provide additional metadata with a response should return an instance of the Response class.

                + The ResponseBuilder class provides a convenient way to create a Response instance using a builder pattern.

            > The HTTP PUT and POST methods expect an HTTP request body, so you should use a MessageBodyReader for methods that respond to PUT and POST requests.

            > Both @PUT and @POST can be used to create or update a resource.

                + POST can mean anything, so when using POST, it is up to the application to define the semantics.
                + PUT has well-defined semantics. When using PUT for creation, the client declares the URI for the newly created resource.

            > PUT has a very clear semantics for creating and updating a resource.

                + The representation the clients sends must be the same representation that is received using a GET, given the same media type.
                + PUT does not allow a resource to be partially updated.

            > A common application pattern is to use POST to create a resource and return a 201 response with a location header whose value is the URI to it.
                    In this pattern, the web service declares the URI for the newly created resource.


        * Using Entity Providers to Map HTTP Response and Request Entity Bodies

            > Entity providers supply mapping services between representations and their associated Java types.
                    The two types of entity providers are MessageBodyReader and MessageBodyWriter.

            > For HTTP requests, the MessageBodyReader is used to map an HTTP request entity body to method parameters.
                    On the response side, a return value is mapped to an HTTP response entity body by using a MessageBodyWriter.

            > For example;      @Produces("text/html")                                  @Consumes("application/x-www-form-urlencoded")
                                @Provider                                               @Provider
                                public class FormWriter implements                      public class FormReader implements MessageBodyReader<NameValuePair> {
                                    MessageBodyWriter<Hashtable<String, String>> {


        * The @Produces Annotation

            > The @Produces annotation is used to specify the MIME media types or representations a resource can produce and send back to the client.

            > If applied at the class level, all the methods in a resource can produce the specified MIME types by default.

            > If applied at the method level, the annotation overrides and @Produces annotations applied at the class level.

            > If no methods in a resource are able to produce the MIME type in a client request, the JAX-RS runtime sends back an HTTP "406 Not Acceptable" error.

            > The value of @Produces is an array of string of MIME types or a comma-seperated list of MediaType constants.
                    @Produces can also use the constants defined in the MediaType class to specify the media type.

            > If a resource class is capable of producing more than one MIME media  type, the resource method chosen will correspond to the
                    most acceptable media type as declared by the client.
                    More specifically, the Accept header of the HTTP request declares what is more acceptable.

            > More than one media type may be declared in the same @Produces declaration.

                                    @Produces({"application/xml", "application/json"})
                                    public String doGetAsXmlOrJson() { ... }


        * The @Consumes Annotation

            > The @Consumes annotation is used to specify which MIME media types of representations a resource can accept, or consume from the client.

            > If applied at the class level, all the response methods accept the specified MIME types by default.

            > If applied at the method level, the annotation overrides ant @Consumes annotations applied at the class level.

            > If a resource is unable to consume the MIME type of a client request, the JAX-RS runtime sends back an HTTP 415 "Unsupported Media Type" error.

            > The value of @Consumes is an array of String of acceptable MIME types, or a comma-seperated list of MediaTypes constants.


    - Extracting Request Parameters

        * Parameters of a resource method may be annotated with parameter-based annotations to extract information from a request.

        * You can extract the following types of parameters for use in your resource class:

            > Query         > URI path          > Form          > Cookie            > Header            > Matrix

        * Query parameters are extracted from the request URI query parameters and specified by using the @QueryParam annotation in the method parameter arguments.

        *                               @Path("smooth")
                                        @GET
                                        public Response smooth(
                                                @DefaultValue("2") @QueryParam("step") int step,
                                                @DefaultValue("true") @QueryParam("min-m") boolean hasMin,
                                                @DefaultValue("red") @QueryParam("last-color") ColorParam lastColor
                                                ) { ... }

        * Both @QueryParam and @PathParam can be used only on the following Java types:

            > All primitive types except char

            > All wrapper classes of primitive types except Character

            > Any class with a constructor that accepts a single String argument

            > Any class with the static method named valueOf(String) that accepts a single String argument

            > List <T>, Set <T>, or SortedSet <T>, where T matches the already listed criteria.
                    Sometimes, parameters may contain more than one value for the same name.
                    If this is the case, these types may be used to obtain all values.

        * If @DefaultValue is not used in conjunction with @QueryPAram, and the query parameter is not present in the request,
                the value will be an empty collection for List, Set, or SortedSet;
                                  null for other object types, and
                                  the default for primitive types.

        * URI path parameters are extracted from the request URI, and the parameter names correspond to the URI path template variable names specified in @Path.

        * URI parameters are specified using the @PathParam annotation in the method parameter arguments.

        * For example;                  @Path("/{username}")
                                        public class MyResourceBean {
                                            ...
                                            @GET
                                            public String printUsername(@PathParam("username") String userId) {
                                                ...
                                            }
                                        }

        * If the URI path template variable cannot be cast to the specified type, the JAX-RS runtime returns an HTTP 400 ("Bad Request") error to the client.

        * If the @PathParam annotation cannot be cast to the specified type, the JAX-RS runtime returns an HTTP 404 ("Not Found") error to the client.

        * The @PathParam parameter and the other parameter-based annotations (@MatrixParam,
                                                                              @HeaderParam,
                                                                              @CookieParam, and
                                                                              @FormParam) obey the same rules as @QueryParam.

        * Cookie parameters, indicated by decorating the parameter with @CookieParam, extract information from the cookies declared in cookie-related HTTP headers.

        * Header parameters, indicated by decorating the parameter with javax.ws.rs.HeaderParam, extract information from the HTTP headers.

        * Matrix parameters, indicated by decorating the parameter with javax.ws.rs.MatrixParam, extract information from URL path segments.

        * Form parameters, indicated by decorating the parameter with @FormParam,
                extract information from a request representation that is of the MIME media type application/x-www-form-urlencoded and conforms to the
                encoding specified by HTML forms


    - Configuring JAX-RS Applications

        * A JAX-RS application consists of at least one resource class packaged within a WAR file.

        * The base URI from which an application's resources respond to requests can be set one of two ways:

            > Using the @ApplicationPath annotation in a subclass of javax.ws.rs.core.Application packaged within the WAR.

            > Using the servlet-mapping tag within the WAR's web.xml deployment descriptor.

        * Configuring a JAX-RS Application Using a Subclass of Application

            > Create a subclass of Application to manually configure the environment in which the REST resources defined in your resource classes are run,
                    including the base URI.

            > Add a class-level @ApplicationPath annotation to set the base URI.

            > For example;              @ApplicationPath("/webapi")
                                        public class MyApplication extends Application { ... }

            > By default, all the resources in an archive will be processed for resources.

            > Override the getClasses method to manually register the resource classes in the application with the JAX-RS runtime.


        * Configuring the Base URI in web.xml

            > The base URI can be set using a servlet-mapping tag in the web.xml deployment descriptor, using the Application class name as the servlet.

            > This setting will also override the path set by @ApplicationPath when using an Application subclass.


------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

                            ACCESSING REST RESOURCES WITH THE JAX-RS CLIENT API

- The JAX-RS Client API provides a high-level API for accessing any REST resources, not just JAX-RS services.

- The Client API is defined in the javax.ws.rs.client package.

- Creating a Basic Client Request Using the Client API

    * The following steps are needed to access a REST resource using the Client API:

        1. Obtain an instance of the javax.ws.rs.client.Client interface.

        2. Configure the Client instance with a target.

        3. Create a request based on the target.

        4. Invoke the request.

    * The Client API is designed to be fluent, with method invocations chained together to configure and submit a request to a REST resource with few lines of code

    *                                   Client client = ClientBuilder.newClient();
                                        String name = client.target("http://example.com/webapi/hello")
                                                                                                      .request(MediaType.TEXT_PLAIN)
                                                                                                      .get(String.class);

    * Obtaining the Client Instance

        > The Client interface defines the actions and infrastructure a REST client requires to consume a RESTful web service.

        > Use the close method to close the Client instances after all the invocations for the target resource have been performed.

        > Client instances are heavyweight objects.
                For performance reasons, limit the number of Client instances in your application, as the initialization and destruction may be expensive.


    * Setting the Client Target

        > The target of a client, the REST resource at a particular URI, is represented by an instance of the javax.ws.rs.client.WebTarget interface.

        > You obtain a WebTarget instance by calling the Client.target method and passing in the URI of the target REST resource.

        >                                   Client client = ClientBuilder.newClient();
                                            WebTarget myResource = client.target("http://example.com/webapi");

        > For complex REST resources, it may be beneficial to create several instances of WebTarget.


    * Setting Path Parameters in Targets

        > Path Parameters in client requests can be specified as a URI template parameters.

        > Template parameters are specified by surrounding the template variable with braces ({}).

        > Call the resolveTemplate method to substitute the {username}, and then call the queryParam method to add another variable to pass.

                        WebTarget myResource = client.target("http://example.com/webapi/read")
                                .path("{userName}")
                                .resolveTemplate("userName", "janedoe")
                                .queryParam("chapter", "1");
                                // http://example.com/webapi/read/janedoe?chapter=1Response response = myResource.request(...)        .get();


    * Invoking the Request

        > After setting and applying any configuration options to the target, call one of the WebTarget.request methods to begin creating the request.

        > The WebTarget.request method returns an instance of javax.ws.rs.client.Invocation.Builder,
                a helper object that provides methods for preparing the client requests.

        >                                       Client client = ClientBuilder.newClient();
                                                WebTarget myResource = client.target("http://example.com/webapi/read");
                                                Invocation.Builder builder = myResource.request(MediaType.TEXT_PLAIN);

        > After setting the media type, invoke the request by calling one of the methods of the Invocation.Builder instance that
                corresponds to the type of HTTPS requests the target REST source expects. These methods are:

            + get()             + post()            + delete()          + put()           + head()            +options()


------------------------------------------------------------------------------------------------------------------------

ADVANCED FEATURES OF THE CLIENT API

    - Configuring the Client Request

        * Additional configuration options may be added to the client request after it is created but before it is invoked

        * Setting Message Headers in the Client Request

            > You can set HTTP headers on the request by calling the Invocation.Builder.header method.

            > If you need to set multiple headers on the request, call the Invocation.Builder.headers method and
                    pass in a javax.ws.rs.core.MultivaluedMap instance with the name-value pairs of the HTTP headers.


        * Setting Cookies in the Client Request

            > You can add HTTP cookies to the request by calling the Invocation.Builder.cookie method, which takes a name-value pair as parameters.


        * Adding Filters to the Client

            > You can register custom filters with the client request or the response received from the target resource.

            > To register filter classes when the Client instance is created, call the Client.register method.


    - Asynchronous Invocations in the Client API

        * In networked applications, network issues can affect the perceived performance of the application,
                particularly in long-running or complicated network calls.

        * Asynchronous processing helps prevent blocking and makes better use of an application's resources.

        * In the JAX-RS Client API, the Invocation.Builder.async method is used when constructing a client request to
                indicate that the call to the service should be performed asynchronously.

        * An asynchronous invocation returns control to the caller immediately,
                with a return type of java.util.concurrent.Future<T> (part of the Java SE concurrency API) and
                with the type set to the return type of the service call.

        * Using Custom Callbacks In Asynchronous Invocations

            > The InvocationCallback interface defines two methods, completed and failed,
                    that are called when an asynchronous invocation either completes successfully or fails, respectively.

            > You may register an InvocationCallback instance on your request by creating a new instance when specifying the request method.


