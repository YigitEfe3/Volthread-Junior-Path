

                                            OVERVIEW OF THE JAVA MESSAGE SERVICE (JMS) API

WHAT IS MESSAGING?

    - Messaging is a method of communication between software components or applications.

    -  A messaging system is a peer-to-peer facility: A messaging client can send messages to, and receive messages from, any other client.
            Each client connects to a messaging agent that provides facilities for creating, sending, receiving, and reading messages.

    - Messaging enables distributed communication that is loosely coupled.
            What makes the communication loosely coupled is that the destination is all that the sender and receiver have in common.
            The sender and the receiver do not have to be available at the same time in order to communicate.


------------------------------------------------------------------------------------------------------------------------

WHAT IS THE JMS API?

    - JMS is an API that allows applications to create, send, receive, and read messages.

    - The JMS API defines a common set of interfaces and associated semantics that allow programs to communicate with other messaging implementations.

    - The JMS API minimizes the set of concepts a programmer must learn in order to use messaging products but provides enough features to
            support sophisticated messaging applications.

    - It also strives to maximize the portability of JMS applications across JMS providers.

    - JMS enables communication that is not only loosely coupled but also

        * Asynchronous: A receiving client does not have to receive messages at the same time the sending client sends them.
                        The sending client can send them and go on to other tasks; the receiving client can receive them much later.

        * Reliable: A messaging provider that implements the JMS API can ensure that a message is delivered once and only once.
                    Lower levels of reliability are available for applications that can afford to miss messages or to receive duplicate messages.


------------------------------------------------------------------------------------------------------------------------

WHEN TO USE JMS API

    - An enterprise application provider is likely to choose a messaging API over a tightly coupled API, such as a remote procedure call (RPC),
            under the following circumstances:

        * The provider wants the components not to depend on information about other components' interfaces, so components can be easily replaced.

        * The provider wants the application to run whether or not all components are up and running simultaneously.

        * The application business model allows a component to send information to another and to continue to operate without receiving an immediate response.


    - For example, components of an enterprise application for an automobile manufacturer can use the JMS API in situations like the following:

        * The inventory component can send a message to the factory component when the inventory level for a product goes below a certain level so
                the factory can make more cars.

        * The factory component can send a message to the parts components so the factory can assemble the parts it needs.

        * The parts components in turn can send messages to their inventory and order components to update their inventories and to order new parts from suppliers.

        * Both the factory and the parts components can send messages to the accounting component to update budget numbers.

        * The business can publish updated catalog items to its sales force.


------------------------------------------------------------------------------------------------------------------------

HOW DOES THE JMS API WORK WITH THE JAVA EE PLATFORM?

    - The JMS API is an integral part of the Java EE platform, and application developers can use messaging with Java EE components.

    - The JMS API in the Java EE platform has the following features.

        * Application clients, Enterprise JavaBeans (EJB) components, and web components can send or synchronously receive a JMS message.

        * Message-driven beans, which are a kind of enterprise bean, enable the asynchronous consumption of messages in the EJB container.

        * Message send and receive operations can participate in Java Transaction API (JTA) transactions,
                which allow JMS operations and database accesses to take place within a single transaction.

    - The JMS API enhances the other parts of the Java EE platform by
                            simplifying enterprise development,
                            allowing loosely coupled, reliable, asynchronous interactions among Java EE components and legacy systems capable of messaging.


