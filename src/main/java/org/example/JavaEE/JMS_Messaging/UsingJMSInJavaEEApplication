

                                    USING THE JMS API IN JAVA EE APPLICATIONS

CREATING RESOURCES FOR JAVA EE APPLICATIONS

    - You can use annotations to create application-specific connection factories and destinations for Java EE enterprise bean or web components.

    - The resources you create in this way are visible only to the application for which you create them.

    - You can also use deployment descriptor elements to create these resources.
            Elements specified in the deployment descriptor override elements specified in annotations.

    - To create a destination, use a @JMSDestinationDefinition annotation like the following on a class:

                              @JMSDestinationDefinition(
                                  name = "java:app/jms/myappTopic",
                                  interfaceName = "javax.jms.Topic",
                                  destinationName = "MyPhysicalAppTopic"
                                )
                  The name, interfaceName, and destinationName elements are required. You can optionally specify a description element.


    - To create a connection factory, use a @JMSConnectionFactoryDefinition annotation like the following on a class:

                              @JMSConnectionFactoryDefinition(
                                  name="java:app/jms/MyConnectionFactory"
                              )
                  The name element is required.
                  You can optionally specify a number of other elements,
                        such as clientId if you want to use the connection factory for durable subscriptions, or description.


    - You need to specify the annotation only once for a given application, in any of the components.

    - The following portable JNDI namespaces are available. Which ones you can use depends on how your application is packaged.

        * java:global:  Makes the resource available to all deployed applications

        * java:app:     Makes the resource available to all components in all modules in a single application

        * java:module:  Makes the resource available to all components within a given module (for example, all enterprise beans within an EJB module)

        * java:comp:    Makes the resource available to a single component only (except in a web application, where it is equivalent to java:module)


------------------------------------------------------------------------------------------------------------------------

USING RESOURCE INJECTION IN ENTERPRISE BEAN OR WEB COMPONENTS

    - You may use resource injection to inject both administered objects and JMSContext objects in Java EE applications.

    - Injecting a ConnectionFactory, Queue, Topic

        * Normally, you use the @Resource annotation to inject a ConnectionFactory, Queue, or Topic into your Java EE application.

        * These objects must be created administratively before you deploy your application.

        * You may want to use the default connection factory, whose JNDI name is                java:comp/DefaultJMSConnectionFactory.

        * When you use resource injection in an application client component, you normally declare the JMS resource static:

                          @Resource(lookup = "java:comp/DefaultJMSConnectionFactory")
                          private static ConnectionFactory connectionFactory;

                          @Resource(lookup = "jms/MyQueue")
                          private static Queue queue;


    - Injecting a JMSContext Object

        * To access a JMSContext object in an enterprise bean or web component, instead of injecting the ConnectionFactory resource and then creating a JMSContext,
                you can use the @Inject and @JMSConnectionFactory annotations to inject a JMSContext.

        * To use the default connection factory, use code like the following:               @Inject
                                                                                            private JMSContext context1;


------------------------------------------------------------------------------------------------------------------------

USING JAVA EE COMPONENTS TO PRODUCE AND TO SYNCHRONOUSLY RECEIVE MESSAGES

    - An application that produces messages or synchronously receives them can use a Java EE web or EJB component, such as a managed bean,
                                                                                                                           a servlet, or
                                                                                                                           a session bean,
                                                                                                                           to perform these operations.

    - Because a synchronous receive with no specified timeout ties up server resources, this usually is not the best application design for a web or EJB component.

    - Using the JMS API in a Java EE component is in many ways similar to using it in an application client.
            The main differences are the areas of resource management and transactions.

    - Managing JMS Resources in Web and EJB Components

        * The JMS resources are a connection and a session, usually combined in a JMSContext object.

        * In general, it is important to release JMS resources when they are no longer being used.

        * Some useful practices to follow are:

            > If you wish to maintain a JMS resource only for the life span of a business method,
                    use a try-with-resources statement to create the JMSContext so that it will be closed automatically at the end of the try block.

            > To maintain a JMS resource for the duration of a transaction or request, inject the JMSContext.
                    This will also cause the resource to be released when it is no longer needed.

            > If you would like to maintain a JMS resource for the life span of an enterprise bean instance,
                    you can use a @PostConstruct callback method to create the resource and a @PreDestroy callback method to close the resource.
                    However, there is normally no need to do this, since application servers usually maintain a pool of connections.
                    If you use a stateful session bean and you wish to maintain the JMS resource in a cached state,
                            you must close the resource in a @PrePassivate callback method and set its value to null,
                            and you must create it again in a @PostActivate callback method.


    - Managing Transactions in Session Beans

        * Instead of using local transactions, you use JTA transactions.

        * You can use either container-managed transactions or bean-managed transactions.

        * Normally, you use container-managed transactions for bean methods that perform sends or receives,
                allowing the EJB container to handle transaction demarcation.
                Because container-managed transactions are the default, you do not have to specify them.

        * You can use bean-managed transactions and the javax.transaction.UserTransaction interface's transaction demarcation methods,
                but you should do so only if your application has special requirements and you are an expert in using transactions.


------------------------------------------------------------------------------------------------------------------------

USING MESSAGE-DRIVEN BEANS TO RECEIVE MESSAGES ASYNCHRONOUSLY

    - A message-driven bean is a message listener to which messages can be delivered from either a queue or a topic.

    - The messages can be sent by any Java EE component (from an application client,
                                                                 another enterprise bean, or
                                                                 a web component)
                                  or from an application or a system that does not use Java EE technology.

    - A message-driven bean class has the following requirements.

        * It must be annotated with the @MessageDriven annotation if it does not use a deployment descriptor.

        * The class must be defined as public, but not as abstract or final.

        * It must contain a public constructor with no arguments.

    - It is recommended, but not required, that a message-driven bean class implement the message listener interface for the message type it supports.

    - A bean that supports the JMS API implements the MessageListener interface, which means that it must provide an onMessage method with the following signature:

                                            void onMessage(Message inMessage)

            The onMessage method is called by the bean's container when a message has arrived for the bean to service.
            This method contains the business logic that handles the processing of the message.
            It is the message-driven bean's responsibility to parse the message and perform the necessary business logic.

    - A message-driven bean differs from an application client's message listener in the following ways.

        * In an application client, you must create a JMSContext, then create a JMSConsumer, then call setMessageListener to activate the listener.
          For a message-driven bean, you need only define the class and annotate it, and the EJB container creates it for you.

        * The bean class uses the @MessageDriven annotation

        * The application client container has only one instance of a MessageListener, which is called on a single thread at a time.
          A message-driven bean, however, may have multiple instances, configured by the container, which may be called concurrently by multiple threads.

        * You do not need to specify a message acknowledgment mode unless you use bean-managed transactions.
                The message is consumed in the transaction in which the onMessage method is invoked.


------------------------------------------------------------------------------------------------------------------------

MANAGING JTA TRANSACTIONS

    - Java EE applications that run in the web or EJB container commonly use JTA transactions to ensure the integrity of accesses to external resources.

    - The key difference between a JTA and a JMS local transaction is that a JTA transaction is controlled by the application server's transaction managers.

    - JTA transactions may be distributed, which means that they can encompass multiple resources in the same transaction, such as a JMS provider and a database.

    - JTA transactions within the EJB and web containers can be either of two kinds.

        * Container-managed transactions: The container controls the integrity of your transactions without your having to call commit or rollback.
                Container-managed transactions are easier to use than bean-managed transactions.
                Use the Required transaction attribute (the default) to ensure that a method is always part of a transaction.

        * Bean-managed transactions: You can use these in conjunction with the javax.transaction.UserTransaction interface,
                which provides its own commit and rollback methods you can use to delimit transaction boundaries.

    - You can use either container-managed transactions or bean-managed transactions with message-driven beans.

    - To ensure that all messages are received and handled within the context of a transaction,
            use container-managed transactions and use the Required transaction attribute (the default) for the onMessage method.

    - Using bean-managed transactions allows you to process the message by using more than one transaction or
            to have some parts of the message processing take place outside a transaction context.

            However, if you use container-managed transactions, message is received by the MDB and processed by the onMessage method within the same transaction.
                    It is not possible to achieve this behavior with bean-managed transactions.


