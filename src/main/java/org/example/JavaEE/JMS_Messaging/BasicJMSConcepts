

                                            BASIC JMS API CONCEPTS

JMS API ARCHITECTURE

    - A JMS application is composed of the following parts:

        * JMS provider is a messaging system that implements the JMS interfaces and provides administrative and control features. Java EE includes a JMS provider.

        * JMS clients are the programs or components, written in the Java programming language, that produce and consume messages. Can be any Java EE component.

        * Messages are the objects that communicate information between JMS clients.

        * Administered objects are JMS objects configured for the use of clients.
                The two kinds of JMS administered objects are destinations and connection factories.


------------------------------------------------------------------------------------------------------------------------

MESSAGING STYLES

    1- Point-to-Point Messaging Style

        - A point-to-point (PTP) product or application is built on the concept of message queues, senders, and receivers.

        - Each message is addressed to a specific queue, and receiving clients extract messages from the queues established to hold their messages.

        - Queues retain all messages sent to them until the messages are consumed or expire.

        - Has the following characteristics:

            * Each message has only one consumer.

            * The receiver can fetch the message whether or not it was running when the client sent the message.

    2- Publish/Subscribe Messaging Style

        - In a publish/subscribe (pub/sub) product or application, clients address messages to a topic, which functions somewhat like a bulletin board.

        - Publishers and subscribers can dynamically publish or subscribe to the topic.

        - Topics retain messages only as long as it takes to distribute them to subscribers.

        - Pub/sub messaging has the following characteristics.

            * Each message can have multiple consumers.

            * A client that subscribes to a topic can consume only messages sent after the client has created a subscription,
                    and the consumer must continue to be active in order for it to consume messages.

        - Use pub/sub messaging when each message can be processed by any number of consumers (or none).


------------------------------------------------------------------------------------------------------------------------

MESSAGE CONSUMPTION

    - Messaging products are inherently asynchronous: There is no fundamental timing dependency between the production and the consumption of a message.
            However, the JMS specification uses this term in a more precise sense.

    - Messages can be consumed in either of two ways:

        * Synchronously: A consumer explicitly fetches the message from the destination by calling the receive method.
                The receive method can block until a message arrives or can time out if a message does not arrive within a specified time limit.

        * Asynchronously: An application client or a Java SE client can register a message listener with a consumer.
                A message listener is similar to an event listener.
                Whenever a message arrives at the destination, the JMS provider delivers the message by calling the listener's onMessage method,
                which acts on the contents of the message.
                In a Java EE application, a message-driven bean serves as a message listener (it too has an onMessage method),
                but a client does not need to register it with a consumer.


