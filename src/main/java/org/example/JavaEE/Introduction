
OVERVIEW

- Enterprise applications provide the business logic for an enterprise.
- The aim of the Java EE platform is to;
    * provide developers with a powerful set of APIs
    * shortening development time,
    * reducing application complexity, and
    * improving application performance.

Distributed Multitiered Applications

    - Java EE Components:
        * Application clients and applets are components that run on the client
        * Java Servlet, JavaServer Faces, and JavaServer Pages (JSP) technology
                components are web components that run on the server
        * EJB components (enterprise beans) are business components that run on the server

------------------------------------------------------------------------------------------------------------------------

CONTAINERS

    - Containers are the interface between a component and the low-level,
            platform-specific functionality that supports the component.

    - The server and containers are as follows:

        * Java EE server: The runtime portion of a Java EE product. A Java EE server provides EJB and web containers.

        * EJB container: Manages the execution of enterprise beans for Java EE applications.
                            Enterprise beans and their container run on the Java EE server.

        * Web container: Manages the execution of web pages, servlets, and some EJB components for Java EE applications.
                            Web components and their container run on the Java EE server.

        * Application client container: Manages the execution of application client components.
                                            Application clients and their container run on the client.

        * Applet container: Manages the execution of applets.
                                Consists of a web browser and a Java Plug-in running on the client together.

------------------------------------------------------------------------------------------------------------------------

WEB SERVICES SUPPORT

    - XML (Extensible Markup Language)
        * cross-platform, extensible, text-based standard for representing data.
        * Parties that exchange XML data can create their own tags to describe the data,
                set up schemas to specify which tags can be used in a particular kind of XML document,
                and use XML style sheets to manage the display and handling of the data.

    - SOAP Transport Protocol
        * Client requests and web service responses are transmitted as Simple Object Access Protocol (SOAP) messages
                over HTTP to enable a completely interoperable exchange between clients and web services,
                all running on different platforms and at various locations on the Internet.

    - WSDL (Web Services Description Language) Standard Format
        * Standardized XML format for describing network services.
        * The description includes the name of the service, the location of the service,
                and ways to communicate with the service.
        * WSDL service descriptions can be published on the Web.

------------------------------------------------------------------------------------------------------------------------

APPLICATION ASSEMBLY AND DEPLOYMENT

A Java EE application is packaged into one or more standard units for deployment. Each unit contains;

    - A functional component or components, such as an enterprise bean, web page, servlet, or applet
    - An optional deployment descriptor that describes its content

Once a Java EE unit has been produced, it is ready to be deployed.

Once deployed on a local platform, the application is ready to run

------------------------------------------------------------------------------------------------------------------------

API'S

Enterprise JavaBeans (EJB) Technology

    - EJB component, or enterprise bean, is a body of code that has fields and methods to implement modules of business logic.
    - Enterprise beans are either session beans or message-driven beans;
        * A session bean represents a transient conversation with a client.
                When the client finishes executing, the session bean and its data are gone.

        * A message-driven bean combines features of a session bean and a message listener,
                allowing a business component to receive messages asynchronously.
                Commonly, these are Java Message Service (JMS) messages.


Java Servlet Technology

    - Java Servlet technology lets you define HTTP-specific servlet classes.
    - A servlet class extends the capabilities of servers that host applications accessed by way of a request-response
            programming model. Although servlets can respond to any type of request,
            they are commonly used to extend the applications hosted by web servers.


JavaServer Faces Technology

    - JavaServer Faces technology is a user interface framework for building web applications.
    - The main components of JavaServer Faces technology are as follows:

        * A GUI component framework.
        * A flexible model for rendering components in different kinds of HTML or different markup languages and technologies.
                A Renderer object generates the markup to render the component and converts the data stored in a model object
                to types that can be represented in a view.
        * A standard RenderKit for generating HTML 4.01 markup.


JavaServer Pages (JSP) Technology

    - JSP technology lets you put snippets of servlet code directly into a text-based document.
    - A JSP page is a text-based document that contains two types of text:

        * Static data, which can be expressed in any text-based format, such as HTML or XML
        * JSP elements, which determine how the page constructs dynamic content


JavaServer Pages Standard Tag Library (JSTL)

    - The JSTL encapsulates core functionality common to many JSP applications.


Java Persistence API (JPA)

    - The JPA is a Java standards–based solution for persistence.
    - Persistence uses an object/relational mapping approach to bridge the gap between an object-oriented model and a relational DB.
    - Java Persistence consists of the following areas:

        * The Java Persistence API  (JPA)
        * The query language
        * Object/relational mapping metadata


Java Transaction API (JTA)
                                                (sınırlamak)
    - The JTA provides a standard interface for demarcating transactions.


Java API for RESTful Web Services (JAX-RS)

    - The JAX-RS defines APIs for the development of web services built according to the Representational State Transfer (REST)
            architectural style.
    - A JAX-RS application is a web application that consists of classes packaged as a servlet in a WAR file along with
            required libraries.


Managed Beans

    - Managed Beans, lightweight container-managed objects (POJOs) with minimal requirements,
            support a small set of basic services, such as resource injection, lifecycle callbacks, and interceptors.


Contexts and Dependency Injection for Java EE (CDI)

    - CDI defines a set of contextual services, provided by Java EE containers,
            that make it easy for developers to use enterprise beans along with JavaServer Faces technology in web applications.


Dependency Injection for Java

    - Dependency Injection for Java defines a standard set of annotations (and one interface) for use on injectable classes.


Bean Validation

    - The Bean Validation specification defines a metadata model and API for validating data in JavaBeans components.


Java Message Service API (JMS)

    - The JMS API is a messaging standard that allows Java EE application components to create, send, receive, and read messages.
    - It enables distributed communication that is loosely coupled, reliable, and asynchronous.


Java EE Connector Architecture

    - The Java EE Connector Architecture is used by tools vendors and system integrators to create resource adapters that
            support access to Enterprise Information Systems (EIS) that can be plugged in to any Java EE product.
    - A resource adapter is a software component that allows Java EE application components to access and
            interact with the underlying resource manager of the EIS (Enterprise Information System)


JavaMail API

    - Java EE applications use the JavaMail API to send email notifications. The JavaMail API has two parts:

            * An application-level interface used by the application components to send mail
            * A Service Provider Interface (SPI)


Java Authorization Contract for Containers (JACC)

    - The JACC specification defines a contract between a Java EE application server and an authorization policy provider.
    - The JACC specification defines java.security.Permission classes that satisfy the Java EE authorization model.


Java Authentication Service Provider Interface for Containers (JASPIC)

    - The JASPIC specification defines a service provider interface (SPI) by which authentication providers that
            implement message authentication mechanisms may be integrated in client or server message-processing containers or runtimes.
    - Authentication providers integrated through this interface operate on network messages provided to
            them by their calling containers.


Java API for WebSocket

    - WebSocket is an application protocol that provides full-duplex communications between two peers over TCP.
    - The Java API for WebSocket enables Java EE applications to create endpoints using annotations that specify the
            configuration parameters of the endpoint and designate its lifecycle callback methods.


Java API for JSON Processing

    - JSON is a text-based data exchange format derived from JavaScript that is used in web services and other connected applications.
    - The Java API for JSON Processing (JSON-P) enables Java EE applications to parse, transform, and query
            JSON data using the object model or the streaming model.


Concurrency Utilities for Java EE

    - Concurrency Utilities for Java EE is a standard API for providing asynchronous capabilities to Java EE application
            components through the following types of objects:
        * managed executor service,
        * managed scheduled executor service,
        * managed thread factory, and context service.


Batch Applications for the Java Platform

    - Batch jobs are tasks that can be executed without user interaction.
    - The Batch Applications for the Java Platform specification is a batch framework that provides support for creating and
            running batch jobs in Java applications.
    - The batch framework consists of;
        * a batch runtime,
        * a job specification language based on XML,
        * a Java API to interact with the batch runtime, and
        * a Java API to implement batch artifacts.

------------------------------------------------------------------------------------------------------------------------

JAVA EE 7 API'S

Java Database Connectivity API (JDBC)

    - The JDBC API lets you invoke SQL commands from Java programming language methods.
    - You use the JDBC API in an enterprise bean when you have a session bean access the database.
    - You can also use the JDBC API from a servlet or a JSP page to access the database directly without going through an enterprise bean.
    - The JDBC API has two parts:

            * An application-level interface used by the application components to access a database
            * A service provider interface (SPI) to attach a JDBC driver to the Java EE platform


Java Naming and Directory Interface API (JNDI)

    - The JNDI API provides naming and directory functionality, enabling applications to access multiple naming and directory services, such as LDAP, DNS, and NIS.
    - The JNDI API provides applications with methods for performing standard directory operations,
            such as associating attributes with objects and searching for objects using their attributes.
    - Using JNDI, a Java EE application can store and retrieve any type of named Java object,
            allowing Java EE applications to coexist with many legacy applications and systems.
    - A naming environment allows a component to be customized without the need to access or change the component's source code.
    - A container implements the component's environment and provides it to the component as a JNDI naming context.


JavaBeans Activation Framework (JAF)

    - The JAF is used by the JavaMail API.
    - JAF provides standard services to;
            * determine the type of an arbitrary piece of data,
            * encapsulate access to it, discover the operations available on it,
            * and create the appropriate JavaBeans component to perform those operations.


Java API for XML Processing (JAXP)

    - The JAXP, part of the Java SE platform, supports the processing of XML documents using;
            * Document Object Model (DOM),
            * Simple API for XML (SAX), and
            * Extensible Stylesheet Language Transformations (XSLT).
    - JAXP enables applications to parse and transform XML documents independently of a particular XML-processing implementation.


Java Architecture for XML Binding (JAXB)

    - The JAXB provides a convenient way to bind an XML schema to a representation in Java language programs.
    - JAXB can be used independently or in combination with JAX-WS, in which case it provides a standard data binding for web service messages.


Java API for XML Web Services (JAX-WS)

    - The JAX-WS specification provides support for web services that use the JAXB API for binding XML data to Java objects.
    - The JAX-WS specification defines client APIs for accessing web services as well as techniques for implementing web service endpoints.


SOAP with Attachments API for Java (SAAJ)

    - The SAAJ is a low-level API on which JAX-WS depends.
    - SAAJ enables the production and consumption of messages that conform to the SOAP 1.1 and 1.2 specifications and the SOAP with Attachments note.
    - (!!!!) Most developers do not use the SAAJ API, instead using the higher-level JAX-WS API. (!!!!)


Java Authentication and Authorization Service (JAAS)

    - The JAAS provides a way for a Java EE application to authenticate and authorize a specific user or group of users to run it.


Common Annotations for the Java Platform

    - Annotations enable a declarative style of programming in the Java platform.

------------------------------------------------------------------------------------------------------------------------