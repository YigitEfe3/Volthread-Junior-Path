

                                            JAVA SERVLET TECHNOLOGY

WHAT IS A SERVLET?

    - A servlet is a Java class used to extend the capabilities of servers that host applications accessed by means of a request-response programming model.

    - All servlets must implement the Servlet interface.


------------------------------------------------------------------------------------------------------------------------

SERVLET LIFECYCLE

    - The lifecycle of a servlet is controlled by the container in which the servlet has been deployed.

    - When a request is mapped to a servlet, the container performs the following steps:

        1-) If an instance of the servlet does not exist, the web container:
                a. Loads the servlet class
                b. Creates an instance of the servlet class
                c. Initializes the servlet instance by calling the init method
        2-) The container invokes the service method, passing request and response objects.

    - If it needs to remove the servlet, the container finalizes the servlet by calling the servlet's destroy method.

    - Handling Servlet Lifecycle Events

        * You can monitor and react to events in a servlet's lifecycle by defining listener objects whose methods get invoked when lifecycle events occur.

    - Servlet Lifecycle Events

            Object                      Event
        * Web context       Initialization and destruction
        * Web context       Attribute added, removed, or replaced
        * Session           Creation, invalidation, activation, passivation, and timeout
        * Session           Attribute added, removed, or replaced
        * Request           A servlet request has started being processed by web components
        * Request           Attribute added, removed, or replaced.


    - Use the @WebListener annotation to define a listener


------------------------------------------------------------------------------------------------------------------------

SHARIN INFORMATION

    - Web components, like most objects, usually work with other objects to accomplish their tasks. Web components can do so by doing the following:

        * Using private helper objects (for example, JavaBeans components)
        * Sharing object that are attributes of a public scopes
        * Using a database
        * Invoking other web resources.

    - Using scope objects

        * Web context: Web components within a web context.
        * Session: Web components handling a request that belongs to the session.
        * Request: Web components handling the request.
        * Page: The JSP page that creates the object.


------------------------------------------------------------------------------------------------------------------------

CREATING AND INITIALIZING A SERVLET

    - Use the @WebServlet annotation to define a servlet component in a web application.

    - The annotated servlet must specify at least one URL pattern.

    - All other attributes are optional, with default settings.

    - Use the value attribute when the only attribute on the annotation is the URL pattern;
            otherwise, use the urlPatterns attribute when other attributes are also used.


------------------------------------------------------------------------------------------------------------------------

WRITING SERVICE METHODS

    - The term service method is used for any method in a servlet class that provides a service to a client.

    - The general pattern for a service method is to
            extract information from the request,
            access external resources,
            and then populate the response based on that information.

    - For HTTP servlets, the correct procedure for populating the response is to do the following:

        1-) Retrieve an output stream from the response.

        2-) Fill in the response headers.

        3-) Write any body content to the output stream.

        Response headers must always be set before the response has been committed.

    - Getting Information from Requests

        * A request contains data passed between a client and the servlet.

        * ServletRequest interface defines methods for accessing the following information:

            > Parameters, which are typically used to convey information between clients and servlets

            > Object-valued attributes, which are typically used to pass information between the web container and a servlet or between collaborating servlets

            > Information about the protocol used to communicate the request and about the client and server involved in the request

            > Information relevant to localization


    - An HTTP request URL contains the following parts:  http://[host]:[port][request-path]?[query-string]

    - The request path is further composed of the following elements.

        * Context path: A concatenation of a forward slash (/) with the context root of the servlet's web application.

        * Servlet path: The path section that corresponds to the component alias that activated this request. This path starts with a forward slash (/).

        * Path info: The part of the request path that is not part of the context path or the servlet path.

    - Query strings are composed of a set of parameters and values.
            Individual parameters are retrieved from a request by using the getParameter method. There are two ways to generate query strings.

        * A query string can explicitly appear in a web page.

        * A query string is appended to a URL when a form with a GET HTTP method is submitted.


    - Construction Responses

        * A response contains data passed between a server and the client.

        * ServletResponse interface defines methods that allow you to do the following.

            > Retrieve an output stream to use to send data to the client.

            > Indicate the content type (for example, text/html) being returned by the response with the setContentType(String) method.

            > Indicate whether to buffer output with the setBufferSize(int) method.

            > Set localization information, such as locale and character encoding.


------------------------------------------------------------------------------------------------------------------------

FILTERING REQUESTS AND RESPONSES

    - A filter is an object that can transform the header and content (or both) of a request or response.

    - Filters differ from web components in that filters usually do not themselves create a response.
            Instead, a filter provides functionality that can be "attached" to any kind of web resource.


    - The main tasks that a filter can perform are as follows.

        * Query the request and act accordingly.

        * Block the request-and-response pair from passing any further.

        * Modify the request headers and data. You do this by providing a customized version of the request.

        * Modify the response headers and data. You do this by providing a customized version of the response.

        * Interact with external resources.


    - Programming Filters

        * Use the @WebFilter annotation to define a filter in a class that implements javax.servlet.Filter

        * Annotated filter must specify at least one URL pattern. This is done by using the urlPatterns or value attribute on the annotation.

        * The most important method in the Filter interface is doFilter, which is passed request, response, and filter chain objects.
                This method can perform the following actions:

            > Examine the request headers.

            > Customize the request object if the filter wishes to modify request headers or data.

            > Customize the response object if the filter wishes to modify response headers or data.

            > Invoke the next entity in the filter chain.

            > Examine response headers after invoking the next filter in the chain.

            > Throw an exception to indicate an error in processing.


    - Programming Customized Requests and Responses

        * A filter that modifies a response must usually capture the response before it is returned to the client.
                To do this, you pass a stand-in stream to the servlet that generates the response.

        * To override request methods, you wrap the request in an object that extends either ServletRequestWrapper or HttpServletRequestWrapper.

        * To override response methods, you wrap the response in an object that extends either ServletResponseWrapper or HttpServletResponseWrapper.


------------------------------------------------------------------------------------------------------------------------

INVOKING OTHER WEB RESOURCES

    - Web components can invoke other web resources both indirectly and directly.

    - A web component indirectly invokes another web resource by embedding a URL that points to another web component in content returned to a client.

    - A web component directly invokes another resource by either including the content of another resource or forwarding a request to another resource.

    - To invoke a resource available on the server that is running a web component,
            you must first obtain a RequestDispatcher object by using the getRequestDispatcher("URL") method.

    - Including Other Resources in the Response

        * It is often useful to include another web resource, such as banner content or copyright information, in the response returned from a web component.

        *  To include another resource, invoke the include method of a RequestDispatcher object:  include(request, response);


------------------------------------------------------------------------------------------------------------------------

ACCESSING THE WEB CONTEXT

    - The context in which web components execute is an object that implements the ServletContext interface.
            You retrieve the web context by using the getServletContext method. The web context provides methods for accessing

        * Initialization parameters

        * Resources associated with the web context

        * Object-valued attributes

        * Logging capabilities


------------------------------------------------------------------------------------------------------------------------

MAINTAINING CLIENT STATE

    - Many applications require that a series of requests from a client be associated with one another. (For example, shopping cart)

    - Web-based applications are responsible for maintaining such state, called a session.


    - Accessing a Session

        * Sessions are represented by an HttpSession object.
                You access a session by calling the getSession method of a request object.


    - Associating Objects with a Session

        * You can associate object-valued attributes with a session by name.

        * You can notify objects of certain events related to their association with a session, such as the following:

            > When the object is added to or removed from a session.

            > When the session to which the object is attached will be passivated or activated.
                    A session will be passivated or activated when it is moved between virtual machines or saved to and restored from persistent storage.


    - Session Management

        * Because an HTTP client can not signal that it no longer needs a session, each session has an associated timeout so that its resources can be reclaimed.

        * To ensure that an active session is not timed out,
                you should periodically access the session by using service methods because this resets the session's time-to-live counter.

        * When a particular client interaction is finished,
                you use the session's invalidate method to invalidate a session on the server side and remove any session data.


------------------------------------------------------------------------------------------------------------------------

FINALIZING A SERVLET

    - The web container may determine that a servlet should be removed from service. In such a case, the container calls the destroy method.

    - The remainder of this section explains how to do the following.

        * Keep track of how many threads are currently running the service method.

        * Provide a clean shutdown by having the destroy method notify long-running threads of the shutdown and wait for them to complete.

        * Have the long-running methods poll periodically to check for shutdown and, if necessary, stop working, clean up, and return.


    - Tracking Service Request

        * To track service requests, include in your servlet class a field that counts the number of service methods that are running.
        * The service method should increment the service counter each time the method is entered and should decrement the counter each time the method returns.


    - Notifying Methods to Shut Down

        * To ensure a clean shutdown, your destroy method should not release any shared resources until all the service requests have completed.
                One part of doing this is to check the service counter.
                Another part is to notify long-running methods that it is time to shut down.

    - Creating Polite Long-Running Methods

        * The final step in providing a clean shutdown is to make any long-running methods behave politely.
                Methods that might run for a long time should check the value of the field that notifies them of shutdowns and should interrupt their work.


------------------------------------------------------------------------------------------------------------------------

UPLOADING FILES WITH JAVA SERVLET TECHNOLOGY

    - The @MultipartConfig annotation supports the following optional attributes:

        * location: An absolute path to a directory on the file system. The default location is "".

        * fileSizeThreshold: The file size in bytes after which the file will be temporarily stored on disk. The default size is 0 bytes.

        * MaxFileSize: The maximum size allowed for uploaded files, in bytes.
                       If the size of any uploaded file is greater than this size, the web container will throw an IllegalStateException.
                       The default size is unlimited.

        * maxRequestSize: The maximum size allowed for a multipart/form-data request, in bytes.
                          The web container will throw an exception if the overall size of all uploaded files exceeds this threshold.
                          The default size is unlimited.


    - The getParts and getPart Methods

        * The Servlet specification supports two additional HttpServletRequest methods:

            > Collection<Part> getParts()
            > Part getPart(String name)


        * Part interface provides methods that allow introspection of each Part. The methods do the following:

            > Retrieve the name, size, and content-type of the Part

            > Query the headers submitted with a Part

            > Delete a Part

            > Write a Part out to disk


------------------------------------------------------------------------------------------------------------------------

ASYNCHRONOUS PROCESSING

    - Web containers in application servers normally use a server thread per client request.

    - Under heavy load conditions, containers need a large amount of threads to serve all the client requests.

    - To create scalable web applications, you must ensure that no threads associated with a request are sitting idle,
            so the container can use them to process new requests.

    - There are two common scenarios in which a thread associated with a request can be sitting idle.

        * The thread needs to wait for a resource to become available or process data before building the response.

        * The thread needs to wait for an event before generating the response.


    - Asynchronous Processing in Servlets

        * Java EE provides asynchronous processing support for servlets and filters.

        * To enable asynchronous processing on a servlet, set the parameter asyncSupported to true on the @WebServlet annotation as follows:

        * AsyncContext class provides the functionality that you need to perform asynchronous processing inside service methods.
                AsyncContext acontext = req.startAsync();

    - Waiting for a Response

        * This section demonstrates how to use the functionality provided by the AsyncContext class for the following use case:

            > A servlet receives a parameter from a GET request.

            > The servlet uses a resource, such as a database or a web service, to retrieve information based on the value of the parameter.
                    The resource can be slow at times, so this may be a blocking operation.

            > The servlet generates a response using the result from the resource.


        * AsyncServlet adds asyncSupported=true to the @WebServlet annotation. The rest of the differences are inside the service method.

            > request.startAsync() causes the request to be processed asynchronously; the response is not sent to the client at the end of the service method.

            > acontext.start(new Runnable() {...}) gets a new thread from the container.

            > The code inside the run() method of the inner class executes in the new thread.
                    The inner class has access to the asynchronous context to read parameters from the request and write to the response.
                    Calling the complete() method of the asynchronous context commits the response and sends it to the client.


------------------------------------------------------------------------------------------------------------------------

NONBLOCKING I/O

    - Even if you use asynchronous processing for all the application-specific blocking operations inside your service methods,
            threads associated with client requests can be momentarily sitting idle because of input/output considerations.

    - Java EE provides nonblocking I/O support for servlets and filters when processing requests in asynchronous mode.
            The following steps summarize how to use nonblocking I/O to process requests and write responses inside service methods.

        1-) Put the request in asynchronous mode as described in Asynchronous Processing.

        2-) Obtain an input stream and/or an output stream from the request and response objects in the service method.

        3-) Assign a read listener to the input stream and/or a write listener to the output stream.

        4-) Process the request and the response inside the listener's callback methods.


------------------------------------------------------------------------------------------------------------------------

PROTOCOL UPGRADE PROCESSING

    - If the server accepts the request to switch to the protocol indicated by the client, it generates an HTTP response with status 101 (switching protocols).
            After this exchange, the client and the server communicate using the new protocol.

    - For example, a client can make an HTTP request to switch to the XYZP protocol

    - The client can specify parameters for the new protocol using HTTP headers. The server can accept the request and generate a response.
























































































































