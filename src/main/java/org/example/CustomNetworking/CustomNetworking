

    - Computers running on the Internet communicate to each other using either the Transmission Control Protocol (TCP)
                                                                            or the User Datagram Protocol (UDP)


    TCP             (is like a telephone call)

    - When two applications want to communicate with each other reliably, they establish a connection and send
        data back and forth over that connection.

    - TCP provides a point-to-point channel for applications that require reliable communications like:
                                                                       > The Hypertext Transfer Protocol (HTTP)
                                                                       > File Transfer Protocol (FTP)

    - !!!!!!!__TCP is a connection-based protocol that provides a reliable flow of data between two computers__!!!!!!!!!


    UDP             (is like sending a letter)

    - The UDP protocol provides for communication that is not guaranteed between two applications on the network.

    - !!!!!!!__UDP is a protocol that sends independent packets of data, called datagrams,
            from one computer to another with no guarantees about arrival. UDP is not connection-based like TCP__!!!!!!!


    PORTS

    - The TCP and UDP protocols use ports to map incoming data to a particular process running on a computer.

    - Data transmitted over the Internet is accompanied by addressing information that identifies the computer
                                                           and the port for which it is destined.

------------------------------------------------------------------------------------------------------------------------

    URL

    - URL is an acronym for Uniform Resource Locator and is a reference (an address) to a resource on the Internet.

    -                         http://example.com
          Protocol Identifier<---/   \----> Resource name

    - The resource name contains:
                    > Host name
                    > Filename
                    > Port Number
                    > Reference

    - Parsing a URL

            > getProtocol - Returns the protocol identifier component of the URL.
            > getAuthority - Returns the authority component of the URL.
            > getHost - Returns the host name component of the URL.
            > getPort - Returns the port number component of the URL. If the port is not set, getPort returns -1.
            > getPath - Returns the path component of this URL.
            > getQuery - Returns the query component of this URL.
            > getFile - Returns the filename component of the URL. (getPath, + the concatenation of the value of getQuery, if any.)
            > getRef - Returns the reference component of the URL.

    - Reading Directly From a URL

            openStream() method to get a stream from which you can read the contents of the URL.
            The openStream() method returns an InputStream object, so reading from a URL is as easy as reading from an input stream.

    - Connecting to a URL

            URL myURL = new URL("http://example.com/");
            URLConnection myURLConnection = myURL.openConnection();
            myURLConnection.connect();

    - Reading from and Writing to a URLConnection

            > Reading from a URLConnection

                The connection is opened implicitly by calling getInputStream.
                Then, like URLReader, this program creates a BufferedReader on the input stream and reads from it.

                public class URLConnectionReader {
                    public static void main(String[] args) throws Exception {
                        URL oracle = new URL("http://www.oracle.com/");
                        URLConnection yc = oracle.openConnection();   //<---------------------
                        BufferedReader in = new BufferedReader(new InputStreamReader(
                                                    yc.getInputStream()));  //<---------------------
                        String inputLine;
                        while ((inputLine = in.readLine()) != null)
                            System.out.println(inputLine);
                        in.close();
                    }
                }

                The output from this program is identical to the output from the program that opens a stream directly from the URL.
                You can use either way to read from a URL.
                However, reading from a URLConnection instead of reading directly from a URL might be more useful.
                This is because you can use the URLConnection object for other tasks (like writing to the URL) at the same time.

            > Writing to a URLConnection

                For a Java program to interact with a server-side process it simply must be able to write to a URL,
                    thus providing data to the server. It can do this by following these steps:

                ~Create a URL.
                ~Retrieve the URLConnection object.
                ~Set output capability on the URLConnection.
                ~Open a connection to the resource.
                ~Get an output stream from the connection.
                ~Write to the output stream.
                ~Close the output stream.

------------------------------------------------------------------------------------------------------------------------

    SOCKETS

    - A socket is one end-point of a two-way communication link between two programs running on the network.
        Socket classes are used to represent the connection between a client program and a server program.

    - A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to.

    Reading from and Writing to a Socket

        > Open a socket.
        > Open an input stream and output stream to the socket.
        > Read from and write to the stream according to the server's protocol.
        > Close the streams.
        > Close the socket.

------------------------------------------------------------------------------------------------------------------------

    DATAGRAM

    - A datagram is an
        independent,
        self-contained message sent over the network whose
            arrival,
            arrival time,
            and content are not guaranteed.

------------------------------------------------------------------------------------------------------------------------

    PROGRAMMATIC ACCESS TO NETWORK PARAMETERS

    What is a Network Interface

        - A network interface is the point of interconnection between a computer and a private or public network.

        - NetworkInterface is useful for a multi-homed system, which is a system with multiple NICs (Network Interface Cards.
            Using NetworkInterface, you can specify which NIC to use for a particular network activity.

    Retrieving Network Interfaces

        - The NetworkInterface class has no public constructor.
            Therefore, you cannot just create a new instance of this class with the new operator.
            Instead, the following static methods are available so that you can retrieve the interface details from the system:
                > getByInetAddress(),
                > getByName(), and
                > getNetworkInterfaces().

    Listing Network Interface Addresses

        - One of the most useful pieces of information you can get from a network interface is the list of IP addresses
            that are assigned to it. You can obtain this information from a NetworkInterface instance by using one of two methods.
                > The first method, getInetAddresses(), returns an Enumeration of InetAddress.
                > The other method, getInterfaceAddresses(), returns a list of java.net.InterfaceAddress instances.

    Network Interface Parameters

        - You can access network parameters about a network interface beyond the name and IP addresses assigned to it

        - isUP() : You can discover if a network interface is “up”. The following methods indicate the network interface type:

            isLoopback() : indicates if the network interface is a loopback interface.
            isPointToPoint() : indicates if the interface is a point-to-point interface.
            isVirtual() : indicates if the interface is a virtual interface.

        - supportsMulticast() method indicates whether the network interface supports multicasting.

        - getHardwareAddress() method returns the network interface's physical hardware address,
            usually called MAC address, when it is available.

        - getMTU() method returns the Maximum Transmission Unit (MTU)

------------------------------------------------------------------------------------------------------------------------

    COOKIES

    HTTP State Management With Cookies

        - Generally, HTTP request/response pairs are independent of each other.
            However, the state management mechanism enables clients and servers that can exchange state information
            to put these pairs in a larger context, which is called a session.

        - The state information used to create and maintain the session is called a cookie.

        - A cookie is a piece of data that can be stored in a browser's cache.

        - Cookies enable state information, such as an online shopping cart, to be remembered.

        - A cookie can be short term, holding data for a single web session, that is, until you close the browser,
            or a cookie can be longer term, holding data for a week or a year.

    CookieHandler Callback Mechanism

        - A CookieHandler object provides a callback mechanism to provide
            an HTTP state management policy implementation in the HTTP protocol handler.

        - The CookieHandler class is an abstract class that has two pairs of related methods.
                > The first pair, getDefault() and setDefault(cookieHandler), are static methods that enable you to discover
                                                                             the current handler that is installed and
                                                                             to install your own handler.
                > The second pair, put(uri, responseHeaders) and get(uri, requestHeaders), enable you to set and get all the
                                                                                           applicable cookies to and from a
                                                                                           cookie cache for the specified URI
                                                                                           in the response/request headers,
                                                                                           respectively.

    Default Cookie Manager

        - CookieManager separates the storage of cookies from the policy surrounding, accepting, and rejecting them.

        - java.net.CookieManager cm = new java.net.CookieManager();
          java.net.CookieHandler.setDefault(cm);

        -  CookieManager is highly customizable by enabling you to set your own CookieStore, CookiePolicy, or both.

    Custom CookieManager

        - Pre-defined policies for accepting cookies:
              > CookiePolicy.ACCEPT_ORIGINAL_SERVER only accepts cookies from the original server.
              > CookiePolicy.ACCEPT_ALL accepts all cookies.
              > CookiePolicy.ACCEPT_NONE accepts no cookies.
              > You can also define your own cookie policy by implementing the shouldAccept method of CookiePolicy.
                    You can then use this CookiePolicy by passing it to the multi-argument CookieManager constructor
                    or by calling the setCookiePolicy(cookiePolicy) method to change an already existing cookie manager.

        - CookieStore

            > A CookieStore is an interface that represents a storage area for cookies. CookieManager
                    adds the cookies to the CookieStore for every HTTP response and
                    retrieves cookies from the CookieStore for every HTTP request.

            > CookieManager.getCookieStore(): Enables you to leverage the default in-memory CookieStore implementation